generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  stores    Store[]  @relation("AdminStore")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Store {
  id        String   @id @default(uuid())
  title     String?
  logo      String?
  color     String?
  email     String?
  phone     String?
  whatsapp  String?
  address   String?
  admin     User     @relation("AdminStore", fields: [adminId], references: [id])
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stores")
}

model Categories {
  id            String          @id @default(uuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  subcategories SubCategories[]
  products      Product[]

  @@map("categories")
}

model SubCategories {
  id         String @id @default(uuid())
  name       String
  categoryId String

  category Categories @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("sub_categories")
}

model Characteristic {
  id   String @id @default(uuid())
  name String

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ProductCharacteristic ProductCharacteristic[]

  @@map("characteristics")
}

model ProductCharacteristic {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String

  Characteristics  Characteristic @relation(fields: [characteristicId], references: [id])
  characteristicId String

  description String
  addition    Int
  hex_value   String

  @@map("products_characteristics")
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Float
  control_stock Boolean        @default(false)
  active        Boolean        @default(true)
  link          String?
  subCategory   SubCategories? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?

  category   Categories? @relation(fields: [categoryId], references: [id])
  categoryId String?

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ProductCharacteristic ProductCharacteristic[]

  @@map("products")
}

// model ProductVariation {
//   id             String  @id @default(uuid())
//   productId      String
//   product        Product @relation(fields: [productId], references: [id])
//   attributes     Json
//   stock_quantity Int?
//   sku            String?

//   @@map("product_variations")
// }

// model ProductImage {
//   id        String   @id @default(uuid())
//   url       String
//   productId String
//   product   Product  @relation(fields: [productId], references: [id])
//   createdAt DateTime @default(now())

//   @@map("product_images")
// }
